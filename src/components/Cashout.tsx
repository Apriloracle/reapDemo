import React, { useState } from 'react';
import { ThirdwebSDK } from "@thirdweb-dev/sdk";
import { LocalWallet } from "@thirdweb-dev/wallets";
import { Celo, Polygon } from "@thirdweb-dev/chains";

interface CashoutProps {
  localWallet: LocalWallet | null;
  aprilTokenAddress: string;
  celoAprilBalance: string;
  polygonAprilBalance: string;
}


const Cashout: React.FC<CashoutProps> = ({ localWallet, aprilTokenAddress, celoAprilBalance, polygonAprilBalance }) => {
  const [to, setTo] = useState<string>('');
  const [amount, setAmount] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<boolean>(false);
  const [selectedChain, setSelectedChain] = useState<'Celo' | 'Polygon'>('Celo');

  const handleCashout = async () => {
    if (!localWallet) {
      setError("Local wallet is not available");
      return;
    }

    setIsLoading(true);
    setError(null);
    setSuccess(false);

    try {
      const signer = await localWallet.getSigner();
      
      const chain = selectedChain === 'Celo' ? Celo : Polygon;

      const sdk = ThirdwebSDK.fromSigner(signer, chain, {
        clientId: "e9e236080783bd20fe8db9cb9300c70b", // Replace with your actual client ID
      });

      // Get the contract instance
      const contract = await sdk.getContract(aprilTokenAddress);

      // Perform the transfer
      const result = await contract.erc20.transfer(to, amount);

      console.log("Transfer result:", result);
      setSuccess(true);
    } catch (err) {
      console.error("Transfer error:", err);
      setError(err instanceof Error ? err.message : "An unknown error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  // Helper function to round and format balance
  const formatBalance = (balance: string): string => {
    return parseFloat(balance).toFixed(2);
  };

  // Updated SVG components for displaying balances
  const CeloBalanceSVG: React.FC<{ balance: string }> = ({ balance }) => (
    <svg width="85" height="61" viewBox="0 0 85 61" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginBottom: '0.5rem' }}>
      <path d="M34.402 12.168C33.4407 12.168 32.61 11.958 31.91 11.538C31.2194 11.1087 30.6827 10.516 30.3 9.76C29.9267 8.99467 29.74 8.108 29.74 7.1C29.74 6.10133 29.9267 5.21933 30.3 4.454C30.6827 3.68867 31.2194 3.096 31.91 2.676C32.61 2.24667 33.4407 2.032 34.402 2.032C35.55 2.032 36.4787 2.30733 37.188 2.858C37.9067 3.40867 38.364 4.18333 38.56 5.182H37.02C36.88 4.60333 36.5907 4.14133 36.152 3.796C35.7227 3.45067 35.1394 3.278 34.402 3.278C33.7394 3.278 33.1654 3.432 32.68 3.74C32.1947 4.048 31.8214 4.48667 31.56 5.056C31.2987 5.62533 31.168 6.30667 31.168 7.1C31.168 7.89333 31.2987 8.57933 31.56 9.158C31.8214 9.72733 32.1947 10.166 32.68 10.474C33.1654 10.7727 33.7394 10.922 34.402 10.922C35.1394 10.922 35.7227 10.7587 36.152 10.432C36.5907 10.096 36.88 9.64333 37.02 9.074H38.56C38.364 10.0447 37.9067 10.8053 37.188 11.356C36.4787 11.8973 35.55 12.168 34.402 12.168ZM43.3569 12.168C42.6849 12.168 42.0876 12.014 41.5649 11.706C41.0422 11.398 40.6316 10.9687 40.3329 10.418C40.0436 9.86733 39.8989 9.228 39.8989 8.5C39.8989 7.75333 40.0436 7.10467 40.3329 6.554C40.6316 5.994 41.0422 5.56 41.5649 5.252C42.0876 4.93467 42.6942 4.776 43.3849 4.776C44.0756 4.776 44.6682 4.93 45.1629 5.238C45.6576 5.546 46.0402 5.95667 46.3109 6.47C46.5816 6.974 46.7169 7.534 46.7169 8.15C46.7169 8.24333 46.7122 8.346 46.7029 8.458C46.7029 8.56067 46.6982 8.67733 46.6889 8.808H40.9209V7.814H45.3169C45.2889 7.226 45.0929 6.76867 44.7289 6.442C44.3649 6.106 43.9122 5.938 43.3709 5.938C42.9882 5.938 42.6382 6.02667 42.3209 6.204C42.0036 6.372 41.7469 6.624 41.5509 6.96C41.3642 7.28667 41.2709 7.702 41.2709 8.206V8.598C41.2709 9.12067 41.3642 9.564 41.5509 9.928C41.7469 10.2827 42.0036 10.5533 42.3209 10.74C42.6382 10.9173 42.9836 11.006 43.3569 11.006C43.8049 11.006 44.1736 10.908 44.4629 10.712C44.7522 10.516 44.9669 10.25 45.1069 9.914H46.5069C46.3856 10.3433 46.1802 10.7307 45.8909 11.076C45.6016 11.412 45.2422 11.678 44.8129 11.874C44.3929 12.07 43.9076 12.168 43.3569 12.168ZM48.2723 12V1.92H49.6723V12H48.2723ZM54.8146 12.168C54.1519 12.168 53.5546 12.014 53.0226 11.706C52.4999 11.398 52.0846 10.9687 51.7766 10.418C51.4779 9.858 51.3286 9.214 51.3286 8.486C51.3286 7.73933 51.4826 7.09067 51.7906 6.54C52.0986 5.98 52.5186 5.546 53.0506 5.238C53.5826 4.93 54.1799 4.776 54.8426 4.776C55.5146 4.776 56.1119 4.93 56.6346 5.238C57.1572 5.546 57.5679 5.97533 57.8666 6.526C58.1746 7.07667 58.3286 7.72533 58.3286 8.472C58.3286 9.21867 58.1746 9.86733 57.8666 10.418C57.5679 10.9687 57.1526 11.398 56.6206 11.706C56.0886 12.014 55.4866 12.168 54.8146 12.168ZM54.8146 10.964C55.1972 10.964 55.5426 10.8707 55.8506 10.684C56.1679 10.4973 56.4199 10.222 56.6066 9.858C56.8026 9.48467 56.9006 9.02267 56.9006 8.472C56.9006 7.92133 56.8072 7.464 56.6206 7.1C56.4339 6.72667 56.1819 6.44667 55.8646 6.26C55.5566 6.07333 55.2159 5.98 54.8426 5.98C54.4692 5.98 54.1239 6.07333 53.8066 6.26C53.4892 6.44667 53.2326 6.72667 53.0366 7.1C52.8499 7.464 52.7566 7.92133 52.7566 8.472C52.7566 9.02267 52.8499 9.48467 53.0366 9.858C53.2326 10.222 53.4846 10.4973 53.7926 10.684C54.1099 10.8707 54.4506 10.964 54.8146 10.964Z" fill="#F5F5F5"/>
      <rect y="25" width="85" height="36" rx="18" fill="#202020"/>
      <text x="18" y="47" fontFamily="Arial, sans-serif" fontSize="14" fill="white"></text>
      <text x="18" y="59" fontFamily="Arial, sans-serif" fontSize="18" fontWeight="bold" fill="#F05E23">{formatBalance(balance)}</text>
    </svg>
  );

  const PolygonBalanceSVG: React.FC<{ balance: string }> = ({ balance }) => (
    <svg width="86" height="61" viewBox="0 0 86 61" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M19.604 12V2.2H22.95C23.734 2.2 24.378 2.33067 24.882 2.592C25.386 2.85333 25.7594 3.20333 26.002 3.642C26.2447 4.08067 26.366 4.58 26.366 5.14C26.366 5.672 26.2447 6.162 26.002 6.61C25.7687 7.04867 25.4 7.40333 24.896 7.674C24.392 7.93533 23.7434 8.066 22.95 8.066H21.004V12H19.604ZM21.004 6.904H22.894C23.6314 6.904 24.154 6.74533 24.462 6.428C24.7794 6.10133 24.938 5.672 24.938 5.14C24.938 4.57067 24.7794 4.132 24.462 3.824C24.154 3.516 23.6314 3.362 22.894 3.362H21.004V6.904ZM30.629 12.168C29.9664 12.168 29.369 12.014 28.837 11.706C28.3144 11.398 27.899 10.9687 27.591 10.418C27.2924 9.858 27.143 9.214 27.143 8.486C27.143 7.73933 27.297 7.09067 27.605 6.54C27.913 5.98 28.333 5.546 28.865 5.238C29.397 4.93 29.9944 4.776 30.657 4.776C31.329 4.776 31.9264 4.93 32.449 5.238C32.9717 5.546 33.3824 5.97533 33.681 6.526C33.989 7.07667 34.143 7.72533 34.143 8.472C34.143 9.21867 33.989 9.86733 33.681 10.418C33.3824 10.9687 32.967 11.398 32.435 11.706C31.903 12.014 31.301 12.168 30.629 12.168ZM30.629 10.964C31.0117 10.964 31.357 10.8707 31.665 10.684C31.9824 10.4973 32.2344 10.222 32.421 9.858C32.617 9.48467 32.715 9.02267 32.715 8.472C32.715 7.92133 32.6217 7.464 32.435 7.1C32.2484 6.72667 31.9964 6.44667 31.679 6.26C31.371 6.07333 31.0304 5.98 30.657 5.98C30.2837 5.98 29.9384 6.07333 29.621 6.26C29.3037 6.44667 29.047 6.72667 28.851 7.1C28.6644 7.464 28.571 7.92133 28.571 8.472C28.571 9.02267 28.6644 9.48467 28.851 9.858C29.047 10.222 29.299 10.4973 29.607 10.684C29.9244 10.8707 30.265 10.964 30.629 10.964ZM35.7899 12V1.92H37.1899V12H35.7899ZM39.9242 15.08L41.6462 11.216H41.2402L38.4542 4.944H39.9662L42.1782 10.068L44.4042 4.944H45.8742L41.3942 15.08H39.9242ZM49.5154 15.248C48.8714 15.248 48.302 15.164 47.8074 14.996C47.3127 14.8373 46.93 14.59 46.6594 14.254C46.3887 13.918 46.2534 13.5073 46.2534 13.022C46.2534 12.77 46.3094 12.5133 46.4214 12.252C46.5334 12 46.7154 11.7573 46.9674 11.524C47.2194 11.2907 47.56 11.0807 47.9894 10.894L48.7734 11.524C48.2974 11.7013 47.9754 11.9113 47.8074 12.154C47.6487 12.406 47.5694 12.6487 47.5694 12.882C47.5694 13.162 47.6534 13.3953 47.8214 13.582C47.9894 13.7687 48.218 13.9087 48.5074 14.002C48.806 14.0953 49.142 14.142 49.5154 14.142C49.8794 14.142 50.1967 14.0907 50.4674 13.988C50.738 13.8853 50.948 13.7407 51.0974 13.554C51.2467 13.3673 51.3214 13.148 51.3214 12.896C51.3214 12.5973 51.2094 12.3453 50.9854 12.14C50.7614 11.944 50.332 11.8273 49.6974 11.79C49.1654 11.7527 48.7127 11.7013 48.3394 11.636C47.9754 11.5707 47.6627 11.4913 47.4014 11.398C47.1494 11.3047 46.9347 11.202 46.7574 11.09C46.5894 10.978 46.4447 10.8613 46.3234 10.74V10.418L47.7234 8.976L48.8574 9.368L47.3314 10.782L47.6254 10.152C47.728 10.2173 47.826 10.2827 47.9194 10.348C48.0127 10.404 48.1387 10.4553 48.2974 10.502C48.456 10.5487 48.6707 10.5907 48.9414 10.628C49.212 10.6653 49.5667 10.7027 50.0054 10.74C50.64 10.7867 51.1487 10.8987 51.5314 11.076C51.9234 11.2533 52.208 11.4913 52.3854 11.79C52.5627 12.0887 52.6514 12.4433 52.6514 12.854C52.6514 13.2553 52.5394 13.638 52.3154 14.002C52.1007 14.366 51.76 14.6647 51.2934 14.898C50.836 15.1313 50.2434 15.248 49.5154 15.248ZM49.5154 9.83C48.918 9.83 48.4094 9.718 47.9894 9.494C47.5787 9.27 47.2614 8.96667 47.0374 8.584C46.8227 8.20133 46.7154 7.77667 46.7154 7.31C46.7154 6.834 46.8227 6.40933 47.0374 6.036C47.2614 5.65333 47.5834 5.35 48.0034 5.126C48.4234 4.89267 48.9274 4.776 49.5154 4.776C50.1034 4.776 50.6027 4.89267 51.0134 5.126C51.4334 5.35 51.7507 5.65333 51.9654 6.036C52.1894 6.40933 52.3014 6.834 52.3014 7.31C52.3014 7.77667 52.1894 8.20133 51.9654 8.584C51.7507 8.96667 51.4334 9.27 51.0134 9.494C50.6027 9.718 50.1034 9.83 49.5154 9.83ZM49.5154 8.71C49.9727 8.71 50.3367 8.59333 50.6074 8.36C50.878 8.11733 51.0134 7.76733 51.0134 7.31C51.0134 6.85267 50.878 6.50733 50.6074 6.274C50.3367 6.03133 49.9727 5.91 49.5154 5.91C49.058 5.91 48.6894 6.03133 48.4094 6.274C48.1294 6.50733 47.9894 6.85267 47.9894 7.31C47.9894 7.76733 48.1294 8.11733 48.4094 8.36C48.6894 8.59333 49.058 8.71 49.5154 8.71ZM50.6634 6.05L50.3274 4.944H53.2254V5.91L50.6634 6.05ZM57.5763 12.168C56.9136 12.168 56.3163 12.014 55.7843 11.706C55.2616 11.398 54.8463 10.9687 54.5383 10.418C54.2396 9.858 54.0903 9.214 54.0903 8.486C54.0903 7.73933 54.2443 7.09067 54.5523 6.54C54.8603 5.98 55.2803 5.546 55.8123 5.238C56.3443 4.93 56.9416 4.776 57.6043 4.776C58.2763 4.776 58.8736 4.93 59.3963 5.238C59.919 5.546 60.3296 5.97533 60.6283 6.526C60.9363 7.07667 61.0903 7.72533 61.0903 8.472C61.0903 9.21867 60.9363 9.86733 60.6283 10.418C60.3296 10.9687 59.9143 11.398 59.3823 11.706C58.8503 12.014 58.2483 12.168 57.5763 12.168ZM57.5763 10.964C57.959 10.964 58.3043 10.8707 58.6123 10.684C58.9296 10.4973 59.1816 10.222 59.3683 9.858C59.5643 9.48467 59.6623 9.02267 59.6623 8.472C59.6623 7.92133 59.569 7.464 59.3823 7.1C59.1956 6.72667 58.9436 6.44667 58.6263 6.26C58.3183 6.07333 57.9776 5.98 57.6043 5.98C57.231 5.98 56.8856 6.07333 56.5683 6.26C56.251 6.44667 55.9943 6.72667 55.7983 7.1C55.6116 7.464 55.5183 7.92133 55.5183 8.472C55.5183 9.02267 55.6116 9.48467 55.7983 9.858C55.9943 10.222 56.2463 10.4973 56.5543 10.684C56.8716 10.8707 57.2123 10.964 57.5763 10.964ZM62.7372 12V4.944H63.9972L64.0812 6.148C64.3052 5.728 64.6225 5.39667 65.0332 5.154C65.4438 4.902 65.9152 4.776 66.4472 4.776C67.0072 4.776 67.4878 4.888 67.8892 5.112C68.2905 5.336 68.6032 5.67667 68.8272 6.134C69.0512 6.582 69.1632 7.14667 69.1632 7.828V12H67.7632V7.968C67.7632 7.31467 67.6185 6.82 67.3292 6.484C67.0398 6.148 66.6198 5.98 66.0692 5.98C65.7052 5.98 65.3785 6.06867 65.0892 6.246C64.7998 6.414 64.5665 6.666 64.3892 7.002C64.2212 7.338 64.1372 7.74867 64.1372 8.234V12H62.7372Z" fill="#F5F5F5"/>
      <rect x="0.5" y="25" width="85" height="36" rx="18" fill="#202020"/>
      <text x="18" y="47" fontFamily="Arial, sans-serif" fontSize="14" fill="white"></text>
      <text x="18" y="59" fontFamily="Arial, sans-serif" fontSize="18" fontWeight="bold" fill="#F05E23">{formatBalance(balance)}</text>
    </svg>
  );

  const ButtonSVG: React.FC<{ text: string; onClick: () => void; disabled: boolean }> = ({ text, onClick, disabled }) => (
    <svg
    width="100%"
    height="54"
    viewBox="0 0 312 54"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    style={{ cursor: disabled ? 'not-allowed' : 'pointer', opacity: disabled ? 0.5 : 1 }}
    onClick={disabled ? undefined : onClick}
  >
    <rect x="1" y="1" width="310" height="52" rx="7" stroke="url(#paint0_linear_2384_35946)" strokeWidth="2" fill={disabled ? "#333" : "transparent"} />
    <text
      x="156"
      y="32"
      fontFamily="Arial, sans-serif"
      fontSize="16"
      fill="white"
      textAnchor="middle"
      alignmentBaseline="middle"
    >
     {text}
    </text>
    <defs>
      <linearGradient id="paint0_linear_2384_35946" x1="-18.5831" y1="-3.48652e-07" x2="310.666" y2="38.427" gradientUnits="userSpaceOnUse">
        <stop stopColor="#F05E23"/>
        <stop offset="0.5" stopColor="#F05E23" stopOpacity="0.33"/>
        <stop offset="1" stopColor="#F05E23"/>
      </linearGradient>
    </defs>
  </svg>

  );

  return (
    <div style={{ padding: '1rem', backgroundColor: '#000000', borderRadius: '0.5rem', marginBottom: '1rem' }}>
      <h2 style={{ color: '#f05e23', marginBottom: '1rem' }}>APRIL Cashout</h2>
      
      {/* Display APRIL balances using updated SVGs */}
      <div style={{ marginBottom: '1rem', display: 'flex', justifyContent: 'space-between' }}>
        <CeloBalanceSVG balance={celoAprilBalance} />
        <PolygonBalanceSVG balance={polygonAprilBalance} />
      </div>

      <svg width="100%" height="308" viewBox="0 0 321 308" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="0.5" y="0.5" width="320" height="307" rx="11.5" fill="#202020" stroke="#42200F"/>
        <path d="M17.32 30.168C16.3587 30.168 15.528 29.958 14.828 29.538C14.1373 29.1087 13.6007 28.516 13.218 27.76C12.8447 26.9947 12.658 26.108 12.658 25.1C12.658 24.1013 12.8447 23.2193 13.218 22.454C13.6007 21.6887 14.1373 21.096 14.828 20.676C15.528 20.2467 16.3587 20.032 17.32 20.032C18.468 20.032 19.3967 20.3073 20.106 20.858C20.8247 21.4087 21.282 22.1833 21.478 23.182H19.938C19.798 22.6033 19.5087 22.1413 19.07 21.796C18.6407 21.4507 18.0573 21.278 17.32 21.278C16.6573 21.278 16.0833 21.432 15.598 21.74C15.1127 22.048 14.7393 22.4867 14.478 23.056C14.2167 23.6253 14.086 24.3067 14.086 25.1C14.086 25.8933 14.2167 26.5793 14.478 27.158C14.7393 27.7273 15.1127 28.166 15.598 28.474C16.0833 28.7727 16.6573 28.922 17.32 28.922C18.0573 28.922 18.6407 28.7587 19.07 28.432C19.5087 28.096 19.798 27.6433 19.938 27.074H21.478C21.282 28.0447 20.8247 28.8053 20.106 29.356C19.3967 29.8973 18.468 30.168 17.32 30.168ZM23.0829 30V19.92H24.4829V24.092C24.7162 23.6813 25.0382 23.3593 25.4489 23.126C25.8689 22.8927 26.3309 22.776 26.8349 22.776C27.3949 22.776 27.8755 22.8927 28.2769 23.126C28.6782 23.35 28.9862 23.6907 29.2009 24.148C29.4155 24.596 29.5229 25.1607 29.5229 25.842V30H28.1369V25.982C28.1369 25.3287 27.9969 24.834 27.7169 24.498C27.4369 24.1527 27.0215 23.98 26.4709 23.98C26.0975 23.98 25.7615 24.0687 25.4629 24.246C25.1642 24.4233 24.9262 24.6847 24.7489 25.03C24.5715 25.366 24.4829 25.7767 24.4829 26.262V30H23.0829ZM33.6513 30.168C33.0727 30.168 32.592 30.07 32.2093 29.874C31.8267 29.678 31.542 29.4167 31.3553 29.09C31.1687 28.754 31.0753 28.3947 31.0753 28.012C31.0753 27.5453 31.1967 27.1487 31.4393 26.822C31.682 26.486 32.0273 26.2293 32.4753 26.052C32.9233 25.8747 33.46 25.786 34.0853 25.786H35.9193C35.9193 25.3753 35.8587 25.0347 35.7373 24.764C35.616 24.4933 35.434 24.2927 35.1913 24.162C34.958 24.022 34.6593 23.952 34.2953 23.952C33.8753 23.952 33.516 24.0547 33.2173 24.26C32.9187 24.456 32.732 24.75 32.6573 25.142H31.2573C31.3133 24.6473 31.4813 24.2273 31.7613 23.882C32.0507 23.5273 32.4193 23.2567 32.8673 23.07C33.3153 22.874 33.7913 22.776 34.2953 22.776C34.958 22.776 35.5133 22.8927 35.9613 23.126C36.4093 23.3593 36.7453 23.6907 36.9693 24.12C37.2027 24.54 37.3193 25.044 37.3193 25.632V30H36.1013L35.9893 28.81C35.8867 28.9967 35.7653 29.174 35.6253 29.342C35.4853 29.51 35.3173 29.6547 35.1213 29.776C34.9347 29.8973 34.7153 29.9907 34.4633 30.056C34.2207 30.1307 33.95 30.168 33.6513 30.168ZM33.9173 29.034C34.216 29.034 34.4867 28.9733 34.7293 28.852C34.972 28.7307 35.1773 28.5673 35.3453 28.362C35.5227 28.1473 35.6533 27.9093 35.7373 27.648C35.8307 27.3773 35.882 27.102 35.8913 26.822V26.78H34.2253C33.824 26.78 33.4973 26.8313 33.2453 26.934C33.0027 27.0273 32.8253 27.158 32.7133 27.326C32.6013 27.494 32.5453 27.69 32.5453 27.914C32.5453 28.1473 32.5967 28.348 32.6993 28.516C32.8113 28.6747 32.97 28.8007 33.1753 28.894C33.3807 28.9873 33.628 29.034 33.9173 29.034ZM39.2043 30V22.944H40.6043V30H39.2043ZM39.9183 21.614C39.6476 21.614 39.4236 21.53 39.2463 21.362C39.0783 21.194 38.9943 20.9793 38.9943 20.718C38.9943 20.466 39.0783 20.2607 39.2463 20.102C39.4236 19.934 39.6476 19.85 39.9183 19.85C40.1796 19.85 40.399 19.934 40.5763 20.102C40.7536 20.2607 40.8423 20.466 40.8423 20.718C40.8423 20.9793 40.7536 21.194 40.5763 21.362C40.399 21.53 40.1796 21.614 39.9183 21.614ZM42.6063 30V22.944H43.8663L43.9503 24.148C44.1743 23.728 44.4916 23.3967 44.9023 23.154C45.313 22.902 45.7843 22.776 46.3163 22.776C46.8763 22.776 47.357 22.888 47.7583 23.112C48.1596 23.336 48.4723 23.6767 48.6963 24.134C48.9203 24.582 49.0323 25.1467 49.0323 25.828V30H47.6323V25.968C47.6323 25.3147 47.4876 24.82 47.1983 24.484C46.909 24.148 46.489 23.98 45.9383 23.98C45.5743 23.98 45.2476 24.0687 44.9583 24.246C44.669 24.414 44.4356 24.666 44.2583 25.002C44.0903 25.338 44.0063 25.7487 44.0063 26.234V30H42.6063Z" fill="white"/>
        <rect x="12.5" y="45.5" width="296" height="51" rx="10.5" stroke="#F05E23"/>
        <foreignObject x="12" y="45" width="296" height="51">
          <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', padding: '0 1rem' }}>
            <select
              value={selectedChain}
              onChange={(e) => setSelectedChain(e.target.value as 'Celo' | 'Polygon')}
              style={{ width: '100%', padding: '0.5rem', backgroundColor: '#202020', color: '#fff', border: '0px solid #555', borderRadius: '0.25rem' }}
            >
              <option value="Celo">Celo</option>
              <option value="Polygon">Polygon</option>
            </select>
          </div>
          </foreignObject>
        <path d="M284.335 68.1666C284.237 68.1667 284.14 68.1961 284.058 68.251C283.976 68.306 283.912 68.384 283.874 68.4753C283.836 68.5667 283.826 68.6671 283.846 68.7641C283.865 68.861 283.912 68.95 283.982 69.02L288.649 73.6866C288.743 73.7803 288.87 73.8329 289.002 73.8329C289.135 73.8329 289.262 73.7803 289.355 73.6866L294.022 69.02C294.092 68.95 294.14 68.861 294.159 68.7641C294.178 68.6671 294.168 68.5667 294.13 68.4753C294.093 68.384 294.029 68.306 293.946 68.251C293.864 68.1961 293.768 68.1667 293.669 68.1666H284.335Z" fill="white"/>
        <rect x="12.5" y="140.5" width="296" height="51" rx="10.5" stroke="#F05E23"/>
        <foreignObject x="12" y="140" width="296" height="51">
          <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', padding: '0 1rem' }}>
            <input
              type="text"
              value={to}
              onChange={(e) => setTo(e.target.value)}
              placeholder="Recipient Address"
              style={{ width: '100%', padding: '0.5rem', backgroundColor: '#202020', color: '#fff', border: '0px solid #555', borderRadius: '0.25rem' }}
            />
          </div>
        </foreignObject>
        <rect x="12.5" y="237.5" width="296" height="51" rx="10.5" stroke="#F05E23"/>
        <foreignObject x="12" y="237" width="296" height="51">
          <div style={{ width: '100%', height: '100%', display: 'flex', alignItems: 'center', padding: '0 1rem' }}>
            <input
              type="text"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              placeholder="Amount"
              style={{ width: '100%', padding: '0.5rem', backgroundColor: '#202020', color: '#fff', border: '0px solid #555', borderRadius: '0.25rem' }}
            />
          </div>
        </foreignObject>
      </svg>

    {/* Add margin here */}
    <div style={{ marginTop: '5rem' }}>
      <ButtonSVG
        text={isLoading ? 'Processing...' : `Cashout on ${selectedChain}`}
        onClick={handleCashout}
        disabled={isLoading || !localWallet}
      />
    </div>

    {error && <p style={{ color: '#ff4444', marginTop: '1rem' }}>{error}</p>}
    {success && <p style={{ color: '#44ff44', marginTop: '1rem' }}>Transfer successful on {selectedChain}!</p>}
  </div>
 );
};

export default Cashout;
